async function placeOrder(obj) {
  // console.log("obj:--------- >", obj);
  try {
    var kimo = obj;
    var flag = false;

    let pool = await sql.connect(config);
    let companyType = await pool
      .request()
      .query(
        `select  COMPANY_SHORT_KEY from [dbo].[COMPANY] WHERE COMPANY_PKID=${kimo.CompanyID}`
      );

    console.log(
      "companyType.recordsets[0]------->",
      companyType.recordsets[0][0].COMPANY_SHORT_KEY
    );
    var re_attach = companyType.recordsets[0][0].COMPANY_SHORT_KEY;
    console.log("re_attach: ", re_attach);

    console.log("placeOrder pool._connected --->", pool._connected);

    let result = await pool
      .request()
      .query(
        "select ORDER_NUMBER from [ORDER] WHERE ORDER_PKID=(SELECT MAX(ORDER_PKID) FROM [dbo].[ORDER])"
      );

    console.log("ORDER_NUMBER-->", result.recordsets[0][0].ORDER_NUMBER);
    var attach = "";

    if (result.recordsets[0][0].ORDER_NUMBER != null || "" || undefined) {
      console.log("PRESENT");
      var str = result.recordsets[0][0].ORDER_NUMBER;
      var splitted = str.split(re_attach);
      console.log("splitted: ", splitted[1].split("/")[0]);
      split2 = splitted[1].split("/")[0];
      console.log("split2: ", split2.split("-")[1]);
      split3 = parseInt(split2.split("-")[1]);
      console.log("split3: ", split3);
      console.log(parseInt(splitted[1]));
      var num = split3 + 1;

      console.log("num: ", num);
      if (num.toString.length == 1) {
        attach = "000" + num;
      } else if (num.toString.length == 2) {
        attach = "00" + num;
      } else if (num.toString.length == 3) {
        attach = "0" + parseInt(splitted[1]);
      } else if (num.toString.length == 4) {
        attach = num;
      } else {
        attach = `${re_attach}-"0001"/${passout}`;
      }
    } else {
      console.log("NOT PRESENT");
      attach = `${re_attach}-"0001"/${passout}`;
    }
    const d = new Date();
    var year = d.getFullYear();
    const search = "20";
    const replaceWith = "";
    var passout = `${year}-${year + 1}`.replaceAll(search, replaceWith);

    console.log("passout: ", passout);

    re_attach = `${re_attach}-${attach}/${passout}`;
    console.log("re_attach: ", re_attach);

    console.log(
      `${re_attach},${kimo.OrderBy},${kimo.OrderByID},${kimo.CustomerID},${kimo.CompanyID},${kimo.OrderDetails.Logistic},${kimo.OrderDetails.LogisticDestination},${kimo.OrderDetails.LogisticDestination},${kimo.BillingAddress},${kimo.DeliveryAddress},${kimo.OrderDetails.CashDiscount},${kimo.OrderAmount},${kimo.OrderDetails.Remark},0,0,${kimo.OrderDetails.DeliveryType},${kimo.OrderDetails.SupplyType}`
    );

    let insertInto = await pool
      .request()
      .query(
        `insert into [ORDER] ([ORDER_NUMBER] ,[ORDER_BY] ,[ORDER_BY_FKID] ,[ORDER_CUSTOMER_FKID] ,[ORDER_COMPANY_FKID] ,[ORDER_LOGISTIC] ,[ORDER_LOGISTIC_DESTINATION] ,[ORDER_LOGISTIC_PAY_MODE] ,[ORDER_BILLING_ADDRESS] ,[ORDER_SHIPPING_ADDRESS] ,[ORDER_CASH_DISCOUNT] ,[ORDER_ORDER_AMOUNT] ,[ORDER_REMARK] ,[ORDER_STATUS] ,[ORDER_ISACTIVE] ,[ORDER_DELIVERY_TYPE],[ORDER_SUPPLY_TYPE] ,[ORDER_DATE])  values('${re_attach}','${kimo.OrderBy}','1','1','1','${kimo.OrderDetails.Logistic}','${kimo.OrderDetails.LogisticDestination}','${kimo.OrderDetails.LogisticDestination}','1','1','${kimo.OrderDetails.CashDiscount}','${kimo.OrderDetails.OrderAmount}','${kimo.OrderDetails.Remark}','0','0','${kimo.OrderDetails.DeliveryType}','1',GETDATE())`
      );

    console.log("insertInto.rowsAffected: ", insertInto.rowsAffected);
    if (insertInto.rowsAffected == 1) {
      if (pool._connected == false) {
        pool = await sql.connect(config);
      }

      console.log("inside insert");
      let getOrderpkid = await pool
        .request()
        .query(
          "SELECT ORDER_PKID FROM [ORDER] WHERE ORDER_PKID=(SELECT MAX(ORDER_PKID) FROM [ORDER])"
        );

      console.log(
        "getOrderpkid.recordsets[0][0].ORDER_PKID: ",
        getOrderpkid.recordsets[0][0].ORDER_PKID
      );

      if (getOrderpkid.recordsets[0][0].ORDER_PKID) {
        console.log("Main if: ");
        kimo.Products.map(async (i) => {
          if (pool._connected == false) {
            pool = await sql.connect(config);
          }
          console.log("------------------------------");

          var OrderItemsIntonew = await pool
            .request()
            .query(
              `insert into ORDER_ITEM ([ORDER_ITEM_ORDER_FKID] ,[ORDER_ITEM_PRODUCT_FKID] ,[ORDER_ITEM_UNIT] ,[ORDER_ITEM_QTY] ,[ORDER_ITEM_CUSTOMER_PRICE] ,[ORDER_ITEM_TOTAL_AMOUNT] ,[ORDER_ITEM_DISCOUNT] ,[ORDER_ITEM_FREE_UNIT_SCHEME] ,[ORDER_ITEM_ACTUAL_AMOUNT])  values(${i.ProductID},${getOrderpkid.recordsets[0][0].ORDER_PKID},${i.PackageID},${i.Quantity},${i.PackageAmt},${i.ProductAmount},${i.Discount},${i.FreeUnitScheme},${i.FinalAmount})`
            );
          console.log(OrderItemsIntonew.rowsAffected[0]);
          if (OrderItemsIntonew.rowsAffected[0] == 1) {
            console.log("if");
            pool.close();
            return true;
          } else {
            console.log("else: ");
            pool.close();
            return false;
          }
        });
      } else {
        console.log("Main else: ");

        pool.close();
        return false;
      }

      return true;
    } else {
      pool.close();

      return false;
    }
  } catch (err) {
    console.log("placeOrder-->", err);
  }
}















---------------------

async function placeOrder(obj) {
  // console.log("obj:--------- >", obj);
  try {
    var kimo = obj;
    var flag = false;

    let pool = await sql.connect(config);
    let companyType = await pool
      .request()
      .query(
        `select  COMPANY_SHORT_KEY from [dbo].[COMPANY] WHERE COMPANY_PKID=${kimo.CompanyID}`
      );

    console.log(
      "companyType.recordsets[0]------->",
      companyType.recordsets[0][0].COMPANY_SHORT_KEY
    );
    var re_attach = companyType.recordsets[0][0].COMPANY_SHORT_KEY;
    console.log("re_attach: ", re_attach);

    console.log("placeOrder pool._connected --->", pool._connected);

    let result = await pool
      .request()
      .query(
        "select ORDER_NUMBER from [ORDER] WHERE ORDER_PKID=(SELECT MAX(ORDER_PKID) FROM [dbo].[ORDER])"
      );

    console.log("ORDER_NUMBER-->", result.recordsets[0]);
    var attach = "";
    var carryOrder = result.recordsets[0][0];
    console.log('carryOrder: ', carryOrder.length);

    if (carryOrder == null || carryOrder === "" || carryOrder == undefined) {
      console.log("NOT PRESENT");
      attach = `${re_attach}-"0001"/${passout}`;
    } else {
      console.log("PRESENT");
      var str = result.recordsets[0][0].ORDER_NUMBER;
      var splitted = str.split(re_attach);
      console.log("splitted: ", splitted[1].split("/")[0]);
      split2 = splitted[1].split("/")[0];
      console.log("split2: ", split2.split("-")[1]);
      split3 = parseInt(split2.split("-")[1]);
      console.log("split3: ", split3);
      console.log(parseInt(splitted[1]));
      var num = split3 + 1;

      console.log("num: ", num);
      if (num.toString.length == 1) {
        attach = "000" + num;
      } else if (num.toString.length == 2) {
        attach = "00" + num;
      } else if (num.toString.length == 3) {
        attach = "0" + parseInt(splitted[1]);
      } else if (num.toString.length == 4) {
        attach = num;
      } else {
        attach = `${re_attach}-"0001"/${passout}`;
      }
    }
    const d = new Date();
    var year = d.getFullYear();
    const search = "20";
    const replaceWith = "";
    var passout = `${year}-${year + 1}`.replaceAll(search, replaceWith);

    console.log("passout: ", passout);

    re_attach = `${re_attach}-${attach}/${passout}`;
    console.log("re_attach: ", re_attach);

    console.log(
      `${re_attach},${kimo.OrderBy},${kimo.OrderByID},${kimo.CustomerID},${kimo.CompanyID},${kimo.OrderDetails.Logistic},${kimo.OrderDetails.LogisticDestination},${kimo.OrderDetails.LogisticDestination},${kimo.BillingAddress},${kimo.DeliveryAddress},${kimo.OrderDetails.CashDiscount},${kimo.OrderAmount},${kimo.OrderDetails.Remark},0,0,${kimo.OrderDetails.DeliveryType},${kimo.OrderDetails.SupplyType}`
    );

    let insertInto = await pool
      .request()
      .query(
        `insert into [ORDER] ([ORDER_NUMBER] ,[ORDER_BY] ,[ORDER_BY_FKID] ,[ORDER_CUSTOMER_FKID] ,[ORDER_COMPANY_FKID] ,[ORDER_LOGISTIC] ,[ORDER_LOGISTIC_DESTINATION] ,[ORDER_LOGISTIC_PAY_MODE] ,[ORDER_BILLING_ADDRESS] ,[ORDER_SHIPPING_ADDRESS] ,[ORDER_CASH_DISCOUNT] ,[ORDER_ORDER_AMOUNT] ,[ORDER_REMARK] ,[ORDER_STATUS] ,[ORDER_ISACTIVE] ,[ORDER_DELIVERY_TYPE],[ORDER_SUPPLY_TYPE] ,[ORDER_DATE])  values('${re_attach}','${kimo.OrderBy}','1','1','1','${kimo.OrderDetails.Logistic}','${kimo.OrderDetails.LogisticDestination}','${kimo.OrderDetails.LogisticDestination}','1','1','${kimo.OrderDetails.CashDiscount}','${kimo.OrderDetails.OrderAmount}','${kimo.OrderDetails.Remark}','0','0','${kimo.OrderDetails.DeliveryType}','1',GETDATE())`
      );

    console.log("insertInto.rowsAffected: ", insertInto.rowsAffected);
    if (insertInto.rowsAffected == 1) {
      if (pool._connected == false) {
        pool = await sql.connect(config);
      }

      console.log("inside insert");
      let getOrderpkid = await pool
        .request()
        .query(
          "SELECT ORDER_PKID FROM [ORDER] WHERE ORDER_PKID=(SELECT MAX(ORDER_PKID) FROM [ORDER])"
        );

      console.log(
        "getOrderpkid.recordsets[0][0].ORDER_PKID: ",
        getOrderpkid.recordsets[0][0].ORDER_PKID
      );

      if (getOrderpkid.recordsets[0][0].ORDER_PKID) {
        console.log("Main if: ");
        kimo.Products.map(async (i) => {
          if (pool._connected == false) {
            pool = await sql.connect(config);
          }
          console.log("------------------------------");

          var OrderItemsIntonew = await pool
            .request()
            .query(
              `insert into ORDER_ITEM ([ORDER_ITEM_ORDER_FKID] ,[ORDER_ITEM_PRODUCT_FKID] ,[ORDER_ITEM_UNIT] ,[ORDER_ITEM_QTY] ,[ORDER_ITEM_CUSTOMER_PRICE] ,[ORDER_ITEM_TOTAL_AMOUNT] ,[ORDER_ITEM_DISCOUNT] ,[ORDER_ITEM_FREE_UNIT_SCHEME] ,[ORDER_ITEM_ACTUAL_AMOUNT])  values(${i.ProductID},${getOrderpkid.recordsets[0][0].ORDER_PKID},${i.PackageID},${i.Quantity},${i.PackageAmt},${i.ProductAmount},${i.Discount},${i.FreeUnitScheme},${i.FinalAmount})`
            );
          console.log(OrderItemsIntonew.rowsAffected[0]);
          if (OrderItemsIntonew.rowsAffected[0] == 1) {
            console.log("if");
            pool.close();
            return true;
          } else {
            console.log("else: ");
            pool.close();
            return false;
          }
        });
      } else {
        console.log("Main else: ");

        pool.close();
        return false;
      }

      return true;
    } else {
      pool.close();

      return false;
    }
  } catch (err) {
    console.log("placeOrder-->", err);
  }
}